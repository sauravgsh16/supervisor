// Code generated by protoc-gen-go. DO NOT EDIT.
// source: supervisor.proto

package supervisor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node_NodeType int32

const (
	Node_Leader Node_NodeType = 0
	Node_Member Node_NodeType = 1
)

var Node_NodeType_name = map[int32]string{
	0: "Leader",
	1: "Member",
}

var Node_NodeType_value = map[string]int32{
	"Leader": 0,
	"Member": 1,
}

func (x Node_NodeType) String() string {
	return proto.EnumName(Node_NodeType_name, int32(x))
}

func (Node_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{0, 0}
}

type Node struct {
	Type                 Node_NodeType `protobuf:"varint,1,opt,name=type,proto3,enum=supervisor.Node_NodeType" json:"type,omitempty"`
	Depends              string        `protobuf:"bytes,2,opt,name=depends,proto3" json:"depends,omitempty"`
	Initialized          bool          `protobuf:"varint,3,opt,name=initialized,proto3" json:"initialized,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetType() Node_NodeType {
	if m != nil {
		return m.Type
	}
	return Node_Leader
}

func (m *Node) GetDepends() string {
	if m != nil {
		return m.Depends
	}
	return ""
}

func (m *Node) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

type RegisterNodeRequest struct {
	Node                 *Node    `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterNodeRequest) Reset()         { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()    {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{1}
}

func (m *RegisterNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeRequest.Unmarshal(m, b)
}
func (m *RegisterNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeRequest.Marshal(b, m, deterministic)
}
func (m *RegisterNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeRequest.Merge(m, src)
}
func (m *RegisterNodeRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeRequest.Size(m)
}
func (m *RegisterNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeRequest proto.InternalMessageInfo

func (m *RegisterNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type RegisterNodeResponse struct {
	// id of added Node
	Node                 *Node    `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterNodeResponse) Reset()         { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()    {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{2}
}

func (m *RegisterNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterNodeResponse.Unmarshal(m, b)
}
func (m *RegisterNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterNodeResponse.Marshal(b, m, deterministic)
}
func (m *RegisterNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterNodeResponse.Merge(m, src)
}
func (m *RegisterNodeResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterNodeResponse.Size(m)
}
func (m *RegisterNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterNodeResponse proto.InternalMessageInfo

func (m *RegisterNodeResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type NodeStatusRequest struct {
	// Node id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatusRequest) Reset()         { *m = NodeStatusRequest{} }
func (m *NodeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NodeStatusRequest) ProtoMessage()    {}
func (*NodeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{3}
}

func (m *NodeStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStatusRequest.Unmarshal(m, b)
}
func (m *NodeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStatusRequest.Marshal(b, m, deterministic)
}
func (m *NodeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusRequest.Merge(m, src)
}
func (m *NodeStatusRequest) XXX_Size() int {
	return xxx_messageInfo_NodeStatusRequest.Size(m)
}
func (m *NodeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusRequest proto.InternalMessageInfo

func (m *NodeStatusRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NodeStatusResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStatusResponse) Reset()         { *m = NodeStatusResponse{} }
func (m *NodeStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NodeStatusResponse) ProtoMessage()    {}
func (*NodeStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{4}
}

func (m *NodeStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStatusResponse.Unmarshal(m, b)
}
func (m *NodeStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStatusResponse.Marshal(b, m, deterministic)
}
func (m *NodeStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusResponse.Merge(m, src)
}
func (m *NodeStatusResponse) XXX_Size() int {
	return xxx_messageInfo_NodeStatusResponse.Size(m)
}
func (m *NodeStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusResponse proto.InternalMessageInfo

func (m *NodeStatusResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterEnum("supervisor.Node_NodeType", Node_NodeType_name, Node_NodeType_value)
	proto.RegisterType((*Node)(nil), "supervisor.Node")
	proto.RegisterType((*RegisterNodeRequest)(nil), "supervisor.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "supervisor.RegisterNodeResponse")
	proto.RegisterType((*NodeStatusRequest)(nil), "supervisor.NodeStatusRequest")
	proto.RegisterType((*NodeStatusResponse)(nil), "supervisor.NodeStatusResponse")
}

func init() { proto.RegisterFile("supervisor.proto", fileDescriptor_b8b9452d77b1c7d2) }

var fileDescriptor_b8b9452d77b1c7d2 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x6d, 0x8d, 0x71, 0x02, 0x25, 0xae, 0x22, 0xb1, 0xa0, 0x86, 0xd5, 0x43, 0x0e,
	0x5a, 0x24, 0x1e, 0xf5, 0xe2, 0xb5, 0xa8, 0x87, 0x55, 0xf0, 0x9c, 0x76, 0x07, 0x5d, 0xa8, 0xd9,
	0x75, 0x77, 0x23, 0xd4, 0xf7, 0xf0, 0x11, 0x7c, 0x4f, 0xc9, 0xb6, 0xc1, 0xb4, 0x58, 0xf0, 0x12,
	0x32, 0x33, 0xdf, 0x3f, 0xff, 0xfc, 0xb0, 0x10, 0xdb, 0x4a, 0xa3, 0xf9, 0x90, 0x56, 0x99, 0x91,
	0x36, 0xca, 0x29, 0x0a, 0xbf, 0x1d, 0xf6, 0x45, 0xa0, 0xff, 0xa0, 0x04, 0xd2, 0x0b, 0xe8, 0xbb,
	0xb9, 0xc6, 0x84, 0xa4, 0x24, 0x1b, 0xe4, 0x87, 0xa3, 0x96, 0xaa, 0x9e, 0xfb, 0xcf, 0xd3, 0x5c,
	0x23, 0xf7, 0x18, 0x4d, 0x60, 0x5b, 0xa0, 0xc6, 0x52, 0xd8, 0xa4, 0x9b, 0x92, 0x6c, 0x87, 0x37,
	0x25, 0x4d, 0x21, 0x92, 0xa5, 0x74, 0xb2, 0x98, 0xc9, 0x4f, 0x14, 0x49, 0x2f, 0x25, 0x59, 0xc8,
	0xdb, 0x2d, 0xc6, 0x20, 0x6c, 0xb6, 0x51, 0x80, 0xe0, 0x0e, 0x0b, 0x81, 0x26, 0xee, 0xd4, 0xff,
	0xf7, 0xf8, 0x36, 0x41, 0x13, 0x13, 0x76, 0x0d, 0x7b, 0x1c, 0x5f, 0xa4, 0x75, 0x68, 0x6a, 0x96,
	0xe3, 0x7b, 0x85, 0xd6, 0xd1, 0x33, 0xe8, 0x97, 0x4a, 0x2c, 0xae, 0x8c, 0xf2, 0x78, 0xfd, 0x4a,
	0xee, 0xa7, 0xec, 0x06, 0xf6, 0x57, 0xc5, 0x56, 0xab, 0xd2, 0xe2, 0x3f, 0xd5, 0xa7, 0xb0, 0x5b,
	0x57, 0x8f, 0xae, 0x70, 0x95, 0x6d, 0x8c, 0x07, 0xd0, 0x95, 0xc2, 0x0b, 0x7b, 0xbc, 0x2b, 0x05,
	0x3b, 0x07, 0xda, 0x86, 0x96, 0x06, 0x07, 0x10, 0x18, 0xb4, 0xd5, 0xcc, 0x79, 0x32, 0xe4, 0xcb,
	0x2a, 0xff, 0x26, 0x10, 0x79, 0xbc, 0xb6, 0x9b, 0x22, 0x1d, 0x43, 0xef, 0x56, 0x08, 0x7a, 0xd2,
	0xbe, 0xe0, 0x8f, 0xb8, 0xc3, 0x74, 0x33, 0xb0, 0x70, 0x64, 0x1d, 0x3a, 0x86, 0xad, 0xe7, 0xc2,
	0x4d, 0x5f, 0xe9, 0xd1, 0x7a, 0x9e, 0x95, 0x04, 0xc3, 0xe3, 0x4d, 0xe3, 0x66, 0xd3, 0x25, 0x99,
	0x04, 0xfe, 0x81, 0x5c, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x94, 0x1c, 0xa4, 0x16, 0x34, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	Add(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	Watch(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (NodeService_WatchClient, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Add(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, "/supervisor.NodeService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Watch(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (NodeService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[0], "/supervisor.NodeService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_WatchClient interface {
	Recv() (*NodeStatusResponse, error)
	grpc.ClientStream
}

type nodeServiceWatchClient struct {
	grpc.ClientStream
}

func (x *nodeServiceWatchClient) Recv() (*NodeStatusResponse, error) {
	m := new(NodeStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	Add(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	Watch(*NodeStatusRequest, NodeService_WatchServer) error
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) Add(ctx context.Context, req *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedNodeServiceServer) Watch(req *NodeStatusRequest, srv NodeService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.NodeService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Add(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).Watch(m, &nodeServiceWatchServer{stream})
}

type NodeService_WatchServer interface {
	Send(*NodeStatusResponse) error
	grpc.ServerStream
}

type nodeServiceWatchServer struct {
	grpc.ServerStream
}

func (x *nodeServiceWatchServer) Send(m *NodeStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _NodeService_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _NodeService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supervisor.proto",
}
